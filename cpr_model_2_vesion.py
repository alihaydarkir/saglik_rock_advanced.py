# üöÄ PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û CPR Eƒûƒ∞Tƒ∞M Sƒ∞STEMƒ∞
# Bu kodu cpr_professional_ui.py olarak kaydet

import streamlit as st
import json
import numpy as np
import random
import time
import uuid
from typing import List, Dict, Tuple
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go

try:
    import chromadb
    from chromadb.config import Settings
    CHROMA_AVAILABLE = True
except ImportError:
    CHROMA_AVAILABLE = False

try:
    from sentence_transformers import SentenceTransformer
    TRANSFORMERS_AVAILABLE = True
except ImportError:
    TRANSFORMERS_AVAILABLE = False

class ProfesyonelRetriever:
    """Profesyonel seviye retrieval sistemi"""
    
    def __init__(self):
        self.koleksiyon_adi = "cpr_professional_v1"
        self.chroma_client = None
        self.koleksiyon = None
        self.model = None
        self.performans_gecmisi = []
        
        # üéØ GELƒ∞≈ûMƒ∞≈û T√úRK√áE KELƒ∞ME HARƒ∞TASI
        self.gelismis_kelime_haritasi = {
            # ƒ∞la√ß terimleri
            'epinefrin': ['epinephrine', 'adrenaline', 'adrenalin', 'vazopresor', 'vazopress√∂r', 'noradrenalin'],
            'amiodarone': ['amiodaron', 'antiaritmik', 'kardiak ila√ß', 'ritim d√ºzenleyici'],
            'atropin': ['atropine', 'antikolinerjik', 'bradikardi ilacƒ±'],
            'lidokain': ['lidocaine', 'lokal anestezik', 'antiaritmik'],
            'magnezyum': ['magnesium', 'mg', 'elektrolit'],
            
            # CPR terimleri
            'cpr': ['cardiopulmonary resuscitation', 'kalp masajƒ±', 'canlandƒ±rma', 'res√ºsitasyon', 
                   'ya≈üam desteƒüi', 'temel ya≈üam desteƒüi', 'ileri ya≈üam desteƒüi'],
            'kompresyon': ['compression', 'basƒ±n√ß', 'g√∂ƒü√ºs basƒ±sƒ±', 'masaj', 'basma'],
            'ventilasyon': ['solunum', 'nefes', 'hava verme', 'breathing', 'oksijen'],
            'defibrilasyon': ['defibrillation', '≈üok', 'elektrik ≈üoku', 'kardiyoversiyon'],
            
            # Cihaz terimleri  
            'aed': ['automated external defibrillator', 'defibrillat√∂r', '≈üok cihazƒ±', 'otomatik defibrillat√∂r'],
            'monit√∂r': ['monitor', 'ekg', 'ekg', 'kalp ritmi takibi'],
            
            # Anatomi terimleri
            'kalp': ['heart', 'kardiak', 'miyokard', 'ventrik√ºl', 'atriyum'],
            'g√∂ƒü√ºs': ['chest', 'toraks', 'g√∂ƒü√ºs kafesi', 'sternum'],
            'nabƒ±z': ['pulse', 'kalp ritmi', 'heartbeat', 'nabƒ±z hƒ±zƒ±'],
            
            # Ya≈ü gruplarƒ±
            'yeti≈ükin': ['adult', 'eri≈ükin', 'b√ºy√ºk', '18 ya≈ü √ºzeri'],
            '√ßocuk': ['child', 'pediatrik', 'k√º√ß√ºk', '1-8 ya≈ü', 'okul √ßaƒüƒ±'],
            'bebek': ['infant', 'baby', 'yenidoƒüan', '0-12 ay', 's√ºt √ßocuƒüu'],
            
            # √ñl√ß√º birimleri
            'doz': ['dose', 'miktar', 'amount', 'dozaj', 'dosis'],
            'mg': ['milligram', 'miligram', 'ml', 'cc'],
            'oran': ['ratio', 'rate', 'frequency', 'hƒ±z', 'frekans'],
            'derinlik': ['depth', 'derinalƒ±k', 'cm', 'santimetre'],
            
            # Acil durum terimleri
            'arrest': ['kalp durmasƒ±', 'kardiyak arrest', 'cardiac arrest', 'ani √∂l√ºm'],
            'hipotermik': ['hypothermic', 'soƒüuk', 'd√º≈ü√ºk sƒ±caklƒ±k', 'hipotermi'],
            'vf': ['ventricular fibrillation', 'ventrik√ºl fibrilasyonu'],
            'vt': ['ventricular tachycardia', 'ventrik√ºl ta≈üikardisi'],
            'asistol': ['asystole', 'd√ºz √ßizgi', 'kalp durmasƒ±'],
            
            # Soru kelimeleri
            'nasƒ±l': ['how', 'ne ≈üekilde', 'hangi y√∂ntem', 'prosed√ºr'],
            'nedir': ['what', 'ne', 'tanƒ±m'],
            'ka√ß': ['how much', 'how many', 'ne kadar', 'miktar'],
            'nerede': ['where', 'hangi b√∂lge', 'lokasyon'],
            'ne zaman': ['when', 'hangi durumda', 'zamanƒ±']
        }
    
    def sistem_baslat(self):
        """Profesyonel sistem ba≈ülatma"""
        if not CHROMA_AVAILABLE or not TRANSFORMERS_AVAILABLE:
            st.error("‚ùå pip install chromadb sentence-transformers plotly")
            return False
        
        try:
            with st.spinner("üöÄ Profesyonel AI sistemi ba≈ülatƒ±lƒ±yor..."):
                # ChromaDB
                self.chroma_client = chromadb.Client(Settings(
                    anonymized_telemetry=False,
                    allow_reset=True
                ))
                
                # üéØ B√úY√úK VE G√ú√áL√ú MODEL - 480MB
                st.info("üì• G√º√ßl√º T√ºrk√ße modeli y√ºkleniyor... (480MB)")
                self.model = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased')
                
                try:
                    self.koleksiyon = self.chroma_client.get_collection(self.koleksiyon_adi)
                    st.success(f"‚úÖ Profesyonel database hazƒ±r: {self.koleksiyon.count()} dok√ºman")
                except:
                    self.koleksiyon = self.chroma_client.create_collection(
                        name=self.koleksiyon_adi,
                        metadata={"version": "professional", "model": "distiluse-multilingual"}
                    )
                    st.info("üÜï Profesyonel database olu≈üturuluyor...")
                
            return True
            
        except Exception as e:
            st.error(f"‚ùå Sistem hatasƒ±: {str(e)}")
            return False
    
    def _super_kelime_genisletme(self, metin: str) -> str:
        """S√ºper geli≈ümi≈ü kelime geni≈ületme"""
        genisletilmis = metin.lower()
        
        # Her kelime i√ßin kapsamlƒ± e≈üle≈ütirme
        for anahtar, esanlamlilar in self.gelismis_kelime_haritasi.items():
            # Ana kelime varsa e≈üanlamlƒ±larƒ± ekle
            if anahtar in genisletilmis:
                genisletilmis += " " + " ".join(esanlamlilar)
            
            # E≈üanlamlƒ±lardan biri varsa ana kelimeyi ekle
            for esanlamli in esanlamlilar:
                if esanlamli.lower() in genisletilmis.lower() and anahtar not in genisletilmis:
                    genisletilmis += " " + anahtar
        
        # √ñzel durum i≈ülemleri
        if "ka√ß" in genisletilmis or "ne kadar" in genisletilmis:
            genisletilmis += " doz miktar mg amount dose"
        
        if "nasƒ±l" in genisletilmis:
            genisletilmis += " prosed√ºr adƒ±m y√∂ntem protokol"
            
        return genisletilmis
    
    def dokumanlar_ekle(self, dokumanlar: List[Dict], temizle: bool = False):
        """Geli≈ümi≈ü dok√ºman ekleme"""
        if not self.koleksiyon or not self.model:
            return False
        
        if temizle:
            try:
                self.chroma_client.delete_collection(self.koleksiyon_adi)
            except:
                pass
            self.koleksiyon = self.chroma_client.create_collection(
                name=self.koleksiyon_adi,
                metadata={"version": "professional", "model": "distiluse-multilingual"}
            )
        
        # Geli≈ümi≈ü progress bar
        progress = st.progress(0)
        status = st.empty()
        time_start = time.time()
        
        ids, embeddings, metadatas, documents = [], [], [], []
        
        for i, dok in enumerate(dokumanlar):
            ids.append(dok.get('id', str(uuid.uuid4())))
            
            # üéØ S√úPER GENƒ∞≈ûLETƒ∞LMƒ∞≈û ƒ∞√áERƒ∞K
            temel_icerik = dok['icerik']
            kategori = dok.get('kategori', '')
            alt_kategori = dok.get('alt_kategori', '')
            
            # Tam kapsamlƒ± geni≈ületme
            tam_icerik = f"{temel_icerik} {kategori} {alt_kategori}"
            genisletilmis_icerik = self._super_kelime_genisletme(tam_icerik)
            
            # G√º√ßl√º embedding olu≈ütur
            embedding = self.model.encode(genisletilmis_icerik).tolist()
            embeddings.append(embedding)
            
            # Zengin metadata
            metadatas.append({
                'kategori': kategori,
                'alt_kategori': alt_kategori,
                'guvenilirlik': float(dok.get('guvenilirlik', 0.8)),
                'acillik_seviyesi': dok.get('acillik_seviyesi', 'normal'),
                'kaynak': dok.get('metadata', {}).get('kaynak', 'AHA Guidelines'),
                'protokol_tipi': dok.get('metadata', {}).get('protokol_tipi', 'standart'),
                'ekleme_tarihi': datetime.now().isoformat(),
                'kelime_sayisi': len(temel_icerik.split())
            })
            
            documents.append(temel_icerik)
            
            # Geli≈ümi≈ü progress
            elapsed = time.time() - time_start
            if i > 0:
                eta = (elapsed / i) * (len(dokumanlar) - i)
                status.text(f"üìä ƒ∞≈üleniyor: {i + 1}/{len(dokumanlar)} ‚Ä¢ ETA: {eta:.1f}s")
            
            progress.progress((i + 1) / len(dokumanlar))
        
        try:
            self.koleksiyon.add(
                embeddings=embeddings,
                metadatas=metadatas,
                documents=documents,
                ids=ids
            )
            
            total_time = time.time() - time_start
            progress.progress(1.0)
            status.success(f"‚úÖ {len(dokumanlar)} dok√ºman eklendi! ({total_time:.1f}s)")
            time.sleep(1.5)
            progress.empty()
            status.empty()
            return True
            
        except Exception as e:
            st.error(f"‚ùå Ekleme hatasƒ±: {str(e)}")
            return False
    
    def profesyonel_arama(self, sorgu: str, top_k: int = 10) -> List[Dict]:
        """Profesyonel seviye arama"""
        if not self.koleksiyon or not self.model:
            return []
        
        try:
            # S√ºper sorgu geni≈ületme
            genisletilmis_sorgu = self._super_kelime_genisletme(sorgu)
            
            # Debug bilgisi
            print(f"[PRO DEBUG] Orijinal: '{sorgu}'")
            print(f"[PRO DEBUG] Geni≈ületilmi≈ü: '{genisletilmis_sorgu[:100]}...'")
            
            # G√º√ßl√º embedding ve arama
            sorgu_embedding = self.model.encode(genisletilmis_sorgu).tolist()
            
            sonuclar = self.koleksiyon.query(
                query_embeddings=[sorgu_embedding],
                n_results=top_k,
                include=["documents", "metadatas", "distances"]
            )
            
            # Geli≈ümi≈ü sonu√ß i≈üleme
            profesyonel_sonuclar = []
            if sonuclar['documents'] and len(sonuclar['documents'][0]) > 0:
                for i in range(len(sonuclar['documents'][0])):
                    distance = sonuclar['distances'][0][i]
                    
                    # üéØ GELƒ∞≈ûMƒ∞≈û SKOR HESAPLAMA
                    base_similarity = max(0.0, 1.0 - distance)
                    
                    # √áoklu fakt√∂r skorlama
                    guvenilirlik = sonuclar['metadatas'][0][i].get('guvenilirlik', 0.8)
                    acillik = sonuclar['metadatas'][0][i].get('acillik_seviyesi', 'normal')
                    
                    # Acillik bonusu
                    acillik_bonusu = 1.2 if acillik == 'kritik' else 1.0
                    
                    # Final skor
                    final_score = base_similarity * (0.7 + 0.3 * guvenilirlik) * acillik_bonusu
                    
                    profesyonel_sonuclar.append({
                        'id': sonuclar['ids'][0][i],
                        'icerik': sonuclar['documents'][0][i],
                        'benzerlik_skoru': final_score,
                        'ham_benzerlik': base_similarity,
                        'metadata': sonuclar['metadatas'][0][i],
                        'kategori': sonuclar['metadatas'][0][i].get('kategori', 'genel'),
                        'guvenilirlik': guvenilirlik,
                        'acillik': acillik
                    })
            
            # Geli≈ümi≈ü sƒ±ralama
            profesyonel_sonuclar.sort(key=lambda x: x['benzerlik_skoru'], reverse=True)
            
            # Performans kaydƒ±
            if profesyonel_sonuclar:
                self.performans_gecmisi.append({
                    'timestamp': datetime.now(),
                    'sorgu': sorgu,
                    'en_iyi_skor': profesyonel_sonuclar[0]['benzerlik_skoru'],
                    'sonuc_sayisi': len(profesyonel_sonuclar)
                })
                
                # Son 20 kaydƒ± tut
                if len(self.performans_gecmisi) > 20:
                    self.performans_gecmisi.pop(0)
            
            # Debug bilgisi
            print(f"[PRO DEBUG] '{sorgu}' i√ßin {len(profesyonel_sonuclar)} profesyonel sonu√ß:")
            for i, sonuc in enumerate(profesyonel_sonuclar[:3]):
                print(f"  {i+1}. Final: {sonuc['benzerlik_skoru']:.3f}, Ham: {sonuc['ham_benzerlik']:.3f}, Kategori: {sonuc['kategori']}")
            
            return profesyonel_sonuclar
            
        except Exception as e:
            st.error(f"‚ùå Arama hatasƒ±: {str(e)}")
            return []
    
    def get_performans_grafigi(self):
        """Performans grafik verisi"""
        if not self.performans_gecmisi:
            return None
        
        return {
            'timestamps': [p['timestamp'] for p in self.performans_gecmisi],
            'skorlar': [p['en_iyi_skor'] for p in self.performans_gecmisi],
            'sorgular': [p['sorgu'][:20] + '...' if len(p['sorgu']) > 20 else p['sorgu'] 
                        for p in self.performans_gecmisi]
        }

class ProfesyonelCPRSistemi:
    """Profesyonel CPR Eƒüitim Sistemi"""
    
    def __init__(self):
        self.retriever = ProfesyonelRetriever()
        self.bilgi_bankasi = []
        self.toplam_sorgu = 0
        self.basarili_sorgu = 0
        self.sistem_baslatma_zamani = None
        
        # Performans metrikleri
        self.ortalama_yanit_suresi = []
        self.kategori_dagilimi = {}
    
    def sistem_baslat(self):
        """Profesyonel sistem ba≈ülatma"""
        self.sistem_baslatma_zamani = datetime.now()
        
        try:
            if not self.retriever.sistem_baslat():
                return False
            
            # JSON veri y√ºkleme
            try:
                with open('cpr_egitim_bilgi_bankasi.json', 'r', encoding='utf-8') as f:
                    self.bilgi_bankasi = json.load(f)
                    
                # Kategori analizi
                for dok in self.bilgi_bankasi:
                    kategori = dok.get('kategori', 'genel')
                    self.kategori_dagilimi[kategori] = self.kategori_dagilimi.get(kategori, 0) + 1
                    
            except FileNotFoundError:
                st.error("‚ùå cpr_egitim_bilgi_bankasi.json bulunamadƒ±!")
                return False
            
            # Database y√ºkleme
            if self.retriever.koleksiyon.count() == 0:
                st.info("üîÑ Profesyonel database olu≈üturuluyor...")
                if not self.retriever.dokumanlar_ekle(self.bilgi_bankasi, temizle=True):
                    return False
            
            return True
            
        except Exception as e:
            st.error(f"‚ùå Sistem hatasƒ±: {str(e)}")
            return False
    
    def profesyonel_sorgulama(self, soru: str) -> Dict:
        """Profesyonel sorgulama sistemi"""
        start_time = time.time()
        self.toplam_sorgu += 1
        
        # Profesyonel arama
        sonuclar = self.retriever.profesyonel_arama(soru, top_k=8)
        
        # üéØ ƒ∞NTELLƒ∞GENT E≈ûƒ∞K Sƒ∞STEMƒ∞
        esik_kurallarƒ± = {
            'doz_miktar': (['doz', 'miktar', 'mg', 'ka√ß', 'ne kadar'], 0.04),
            'acil_kritik': (['acil', 'kritik', 'emergency', 'arrest', 'durma'], 0.03),
            'prosedur': (['nasƒ±l', 'how', 'adƒ±m', 'y√∂ntem', 'prosed√ºr'], 0.06),
            'tanƒ±m': (['nedir', 'what', 'tanƒ±m', 'ne'], 0.08),
            'genel': ([], 0.12)
        }
        
        # Uygun e≈üiƒüi bul
        kullanilan_esik = esik_kurallarƒ±['genel'][1]
        esik_tipi = 'genel'
        
        for tip, (kelimeler, esik_degeri) in esik_kurallarƒ±.items():
            if any(kelime in soru.lower() for kelime in kelimeler):
                kullanilan_esik = esik_degeri
                esik_tipi = tip
                break
        
        kaliteli_sonuclar = [s for s in sonuclar if s['benzerlik_skoru'] > kullanilan_esik]
        
        # CPR analizi
        cpr_kelimeler = ['cpr', 'kalp', 'res√ºsitasyon', 'defibrilasyon', 'epinefrin', 'aed', 'kompresyon']
        cpr_odakli = any(kelime in soru.lower() for kelime in cpr_kelimeler)
        
        acil_kelimeler = ['acil', 'kritik', 'emergency', 'arrest', 'durma', 'kriz']
        acil_durum = any(kelime in soru.lower() for kelime in acil_kelimeler)
        
        # Yanƒ±t olu≈üturma
        if len(kaliteli_sonuclar) >= 1:
            self.basarili_sorgu += 1
            yanit = self._profesyonel_yanit_olustur(soru, kaliteli_sonuclar[:3], acil_durum)
            basarili = True
        else:
            yanit = self._intelligent_oneri_sistemi(soru, sonuclar[:2])
            basarili = False
        
        # Performans hesaplama
        yanit_suresi = time.time() - start_time
        self.ortalama_yanit_suresi.append(yanit_suresi)
        
        if len(self.ortalama_yanit_suresi) > 10:
            self.ortalama_yanit_suresi.pop(0)
        
        # Skor deƒüerlendirmesi
        if kaliteli_sonuclar:
            en_iyi_skor = kaliteli_sonuclar[0]['benzerlik_skoru']
            if en_iyi_skor > 0.7:
                performans = "üèÜ M√ºkemmel"
            elif en_iyi_skor > 0.5:
                performans = "üöÄ √áok ƒ∞yi"
            elif en_iyi_skor > 0.3:
                performans = "üìà ƒ∞yi"
            elif en_iyi_skor > 0.15:
                performans = "üìä Orta"
            else:
                performans = "üìâ D√º≈ü√ºk"
        else:
            en_iyi_skor = 0
            performans = "‚ö†Ô∏è Yetersiz"
        
        return {
            "basarili": basarili,
            "yanit": yanit,
            "bulunan_dokuman_sayisi": len(sonuclar),
            "kaliteli_sonuc_sayisi": len(kaliteli_sonuclar),
            "en_iyi_skor": en_iyi_skor,
            "sistem_performansi": performans,
            "cpr_odakli": cpr_odakli,
            "acil_durum": acil_durum,
            "kullanilan_esik": kullanilan_esik,
            "esik_tipi": esik_tipi,
            "yanit_suresi": yanit_suresi,
            "basari_orani": f"{(self.basarili_sorgu/max(1,self.toplam_sorgu))*100:.1f}%",
            "sonuc_detaylari": [
                (s['benzerlik_skoru'], s['ham_benzerlik'], s['kategori'], s['guvenilirlik']) 
                for s in kaliteli_sonuclar[:3]
            ]
        }
    
    def _profesyonel_yanit_olustur(self, soru: str, sonuclar: List[Dict], acil: bool) -> str:
        """Profesyonel yanƒ±t ≈üablonu"""
        if acil:
            header = "üö® KRƒ∞Tƒ∞K CPR PROTOKOL√ú"
            uyari = "‚ö†Ô∏è **YA≈ûAMSAL ACƒ∞L DURUM!** Bu protokolleri kesin takip edin.\n\n"
            renk = "üî¥"
        else:
            header = "üìã PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û CPR REHBERƒ∞"
            uyari = ""
            renk = "üîµ"
        
        yanit = f"## {header}\n\n{uyari}**Soru:** {soru}\n\n"
        
        for i, sonuc in enumerate(sonuclar):
            yanit += f"### {renk} Protokol {i+1}\n"
            yanit += f"**Kategori:** {sonuc['metadata']['kategori'].replace('_', ' ').title()}\n"
            yanit += f"**Alt Kategori:** {sonuc['metadata']['alt_kategori'].replace('_', ' ').title()}\n"
            yanit += f"**ƒ∞√ßerik:** {sonuc['icerik']}\n\n"
            
            # Profesyonel kalite g√∂stergeleri
            kalite_yildiz = "‚≠ê" * min(5, max(1, int(sonuc['benzerlik_skoru'] * 8)))
            yanit += f"**Kalite Puanƒ±:** {kalite_yildiz} ({sonuc['benzerlik_skoru']:.3f}) ‚Ä¢ "
            yanit += f"**Ham Skor:** {sonuc['ham_benzerlik']:.3f} ‚Ä¢ "
            yanit += f"**G√ºvenilirlik:** %{sonuc['guvenilirlik']*100:.0f} ‚Ä¢ "
            yanit += f"**Acillik:** {sonuc['acillik'].upper()} ‚Ä¢ "
            yanit += f"**Kaynak:** {sonuc['metadata']['kaynak']}\n\n"
            yanit += "---\n\n"
        
        yanit += "### ‚öïÔ∏è PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û UYARILAR\n"
        yanit += "‚Ä¢ **AHA 2020 Guidelines** ve **ERC 2021** temelinde hazƒ±rlanmƒ±≈ütƒ±r\n"
        yanit += "‚Ä¢ **Ger√ßek uygulamada** mutlaka takƒ±m koordinasyonu yapƒ±n\n"
        yanit += "‚Ä¢ **Acil durumlarda** 112'yi derhal arayƒ±n\n"
        yanit += "‚Ä¢ **S√ºrekli eƒüitim** ve **d√ºzenli pratik** yapmayƒ± unutmayƒ±n\n"
        yanit += "‚Ä¢ **Protokol g√ºncellemeleri** i√ßin d√ºzenli takip yapƒ±n\n"
        
        return yanit
    
    def _intelligent_oneri_sistemi(self, soru: str, yakinlik_sonuclari: List[Dict]) -> str:
        """Akƒ±llƒ± √∂neri sistemi"""
        yanit = f"## üéØ AKILLI CPR REHBERƒ∞\n\n"
        yanit += f"**Soru:** {soru}\n\n"
        yanit += "**Durum:** Spesifik protokol bulunamadƒ±, akƒ±llƒ± √∂neriler sunuluyor.\n\n"
        
        # Yakƒ±n sonu√ßlar varsa g√∂ster
        if yakinlik_sonuclari:
            yanit += "### üìã Yakƒ±n Konular:\n"
            for i, sonuc in enumerate(yakinlik_sonuclari):
                yanit += f"‚Ä¢ **{sonuc['metadata']['kategori'].replace('_', ' ').title()}:** "
                yanit += f"{sonuc['icerik'][:80]}... (Skor: {sonuc['benzerlik_skoru']:.3f})\n"
            yanit += "\n"
        
        # Soru tipine g√∂re √∂zel √∂neriler
        if 'doz' in soru.lower() or 'miktar' in soru.lower():
            yanit += "### üíä ƒ∞la√ß Dozu Rehberi:\n"
            yanit += "‚Ä¢ **Epinefrin:** 1mg IV/IO her 3-5 dakikada bir\n"
            yanit += "‚Ä¢ **Amiodarone:** ƒ∞lk doz 300mg IV, ikinci doz 150mg\n"
            yanit += "‚Ä¢ **Atropin:** 1mg IV, maksimum 3mg (bradiasistol i√ßin)\n"
            yanit += "‚Ä¢ **Lidokain:** 1-1.5mg/kg IV (amiodarone alternatifi)\n\n"
        
        if '√ßocuk' in soru.lower() or 'bebek' in soru.lower():
            yanit += "### üë∂ Pediatrik CPR Rehberi:\n"
            yanit += "‚Ä¢ **√áocuk (1-8 ya≈ü):** Tek ki≈üi 30:2, iki ki≈üi 15:2\n"
            yanit += "‚Ä¢ **Bebek (0-12 ay):** ƒ∞ki parmak tekniƒüi, derinlik 4cm\n"
            yanit += "‚Ä¢ **Kompresyon hƒ±zƒ±:** 100-120/dk (t√ºm ya≈ü gruplarƒ±)\n\n"
        
        yanit += "### üîç Geli≈ümi≈ü Arama √ñnerileri:\n"
        yanit += "‚Ä¢ **Daha spesifik kelimeler** kullanƒ±n (√∂rn: 'epinefrin 1mg IV doz')\n"
        yanit += "‚Ä¢ **Ya≈ü grubu** belirtin (yeti≈ükin/√ßocuk/bebek)\n"
        yanit += "‚Ä¢ **Sayƒ±sal deƒüerler** sorun (ka√ß mg, ne kadar, hangi oran)\n"
        yanit += "‚Ä¢ **Prosed√ºr adƒ±mlarƒ±** i√ßin 'nasƒ±l', 'adƒ±m adƒ±m' kullanƒ±n\n"
        yanit += "‚Ä¢ **Acil durumlar** i√ßin 'kritik', 'acil', 'arrest' ekleyin\n\n"
        
        yanit += "### üéØ Pop√ºler CPR Sorularƒ±:\n"
        yanit += "- Yeti≈ükinlerde epinefrin dozu ka√ß mg?\n"
        yanit += "- CPR kompresyon oranƒ± 30:2 mi?\n"
        yanit += "- AED cihazƒ± nasƒ±l adƒ±m adƒ±m kullanƒ±lƒ±r?\n"
        yanit += "- √áocuklarda g√∂ƒü√ºs basƒ± derinliƒüi ne olmalƒ±?\n"
        yanit += "- Hipotermik arrest durumunda hangi protokol?\n"
        
        return yanit
    
    def get_sistem_metrikleri(self):
        """Sistem metrikleri"""
        uptime = datetime.now() - self.sistem_baslatma_zamani if self.sistem_baslatma_zamani else None
        
        return {
            'toplam_sorgu': self.toplam_sorgu,
            'basarili_sorgu': self.basarili_sorgu,
            'basari_orani': f"{(self.basarili_sorgu/max(1,self.toplam_sorgu))*100:.1f}%",
            'ortalama_yanit_suresi': f"{sum(self.ortalama_yanit_suresi)/max(1,len(self.ortalama_yanit_suresi)):.2f}s",
            'uptime': str(uptime).split('.')[0] if uptime else "0:00:00",
            'kategori_dagilimi': self.kategori_dagilimi,
            'database_boyutu': self.retriever.koleksiyon.count() if self.retriever.koleksiyon else 0
        }

# üé® MODERN STREAMLIT UI
st.set_page_config(
    page_title="CPR Professional System ü´Ä",
    page_icon="ü´Ä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Modern CSS tasarƒ±m
st.markdown("""
<style>
    /* Ana tema */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
    }
    
    /* Metrik kartlarƒ± */
    .metric-card {
        background: linear-gradient(145deg, #f8f9fa, #e9ecef);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 5px solid #667eea;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
        transition: transform 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    /* Ba≈üarƒ± kartƒ± */
    .success-card {
        background: linear-gradient(145deg, #d4edda, #c3e6cb);
        border: 1px solid #c3e6cb;
        border-radius: 12px;
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.2);
    }
    
    /* Uyarƒ± kartƒ± */
    .warning-card {
        background: linear-gradient(145deg, #fff3cd, #ffeaa7);
        border: 1px solid #ffeaa7;
        border-radius: 12px;
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(255, 193, 7, 0.2);
    }
    
    /* Acil kart */
    .emergency-card {
        background: linear-gradient(145deg, #f8d7da, #f1aeb5);
        border: 1px solid #f1aeb5;
        border-radius: 12px;
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.2);
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 4px 15px rgba(220, 53, 69, 0.2); }
        50% { box-shadow: 0 6px 25px rgba(220, 53, 69, 0.4); }
        100% { box-shadow: 0 4px 15px rgba(220, 53, 69, 0.2); }
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
    
    /* Button styling */
    .stButton > button {
        background: linear-gradient(145deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }
    
    /* Input styling */
    .stTextInput > div > div > input {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 0.75rem;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
</style>
""", unsafe_allow_html=True)

# Ana ba≈ülƒ±k
st.markdown("""
<div class="main-header">
    <h1>ü´Ä CPR Professional System v2.0</h1>
    <p><strong>B√ºy√ºk Model (480MB) ‚Ä¢ Modern UI ‚Ä¢ Geli≈ümi≈ü Performans ƒ∞zleme</strong></p>
</div>
""", unsafe_allow_html=True)

# Geli≈ümi≈ü √∂rnek sorular
gelismis_ornekler = [
    "Yeti≈ükinlerde epinefrin dozu ka√ß mg olmalƒ±dƒ±r?",
    "CPR kompresyon oranƒ± ve derinliƒüi nedir?",
    "AED cihazƒ± nasƒ±l adƒ±m adƒ±m kullanƒ±lƒ±r?",
    "√áocuklarda kalp masajƒ± nasƒ±l yapƒ±lƒ±r?",
    "Hipotermik arrest durumunda protokol nedir?",
    "Amiodarone dozu ve uygulama ≈üekli?",
    "Bebeklerde CPR tekniƒüi nasƒ±l uygulanƒ±r?",
    "VF/VT ritminde defibrilasyon protokol√º?"
]

# SIDEBAR - PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û
with st.sidebar:
    st.markdown("## ü´Ä CPR Professional Hub")
    st.markdown("---")
    
    # Hƒ±zlƒ± eri≈üim butonlarƒ±
    st.markdown("### üöÄ Hƒ±zlƒ± Sorular")
    for i, soru in enumerate(gelismis_ornekler):
        if st.button(soru, key=f"pro_btn_{i}", width='stretch'):
            st.session_state.pro_soru_input = soru
    
    st.markdown("---")
    
    # Sistem durumu
    st.markdown("### ‚öôÔ∏è Sistem Durumu")
    
    if CHROMA_AVAILABLE and TRANSFORMERS_AVAILABLE:
        st.success("‚úÖ Profesyonel AI Aktif")
        st.info("üß† Model: distiluse-multilingual")
        st.info("üíæ Boyut: 480MB")
        st.info("üåê T√ºrk√ße: Optimizasyonlu")
    else:
        st.error("‚ùå K√ºt√ºphaneler Eksik")
        st.code("pip install chromadb sentence-transformers plotly")
    
    st.markdown("---")
    
    # √ñzellikler
    st.markdown("### üèÜ Pro √ñzellikler")
    st.markdown("""
    ‚Ä¢ üéØ **S√ºper Kelime Geni≈ületme**
    ‚Ä¢ üß† **480MB G√º√ßl√º Model**
    ‚Ä¢ üìä **Performans ƒ∞zleme**
    ‚Ä¢ üé® **Modern UI Tasarƒ±mƒ±**
    ‚Ä¢ üîç **Intelligent E≈üik Sistemi**
    ‚Ä¢ üìà **Ger√ßek Zamanlƒ± Grafikler**
    ‚Ä¢ ‚ö° **Multi-fakt√∂r Skorlama**
    ‚Ä¢ üé≠ **Dinamik Yanƒ±t Sistemi**
    """)

# Sistem ba≈ülatma
if "pro_sistem" not in st.session_state:
    with st.spinner("üöÄ Profesyonel sistem ba≈ülatƒ±lƒ±yor..."):
        st.session_state.pro_sistem = ProfesyonelCPRSistemi()
        st.session_state.pro_basladi = st.session_state.pro_sistem.sistem_baslat()

# Ana i√ßerik
if not st.session_state.pro_basladi:
    st.markdown("""
    <div class="warning-card">
        <h3>‚ùå Sistem Ba≈ülatƒ±lamadƒ±</h3>
        <p>L√ºtfen a≈üaƒüƒ±dakileri kontrol edin:</p>
        <ul>
            <li><strong>cpr_egitim_bilgi_bankasi.json</strong> dosyasƒ± mevcut mu?</li>
            <li>Gerekli k√ºt√ºphaneler kurulu mu? <code>pip install chromadb sentence-transformers plotly</code></li>
            <li>ƒ∞nternet baƒülantƒ±sƒ± var mƒ±? (Model indirme i√ßin)</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
else:
    st.markdown('<div class="success-card">üöÄ <strong>Profesyonel sistem aktif!</strong> En geli≈ümi≈ü CPR eƒüitimi deneyimi ba≈üladƒ±.</div>', unsafe_allow_html=True)
    
    # PROFESYONEL METRƒ∞KLER DASHBOARD
    metrikliler = st.session_state.pro_sistem.get_sistem_metrikleri()
    
    st.markdown("## üìä Sistem Dashboard")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìö Database",
            value=metrikliler['database_boyutu'],
            delta="Profesyonel"
        )
        
    with col2:
        st.metric(
            label="üìà Ba≈üarƒ± Oranƒ±",
            value=metrikliler['basari_orani'],
            delta=f"{metrikliler['basarili_sorgu']}/{metrikliler['toplam_sorgu']}"
        )
    
    with col3:
        st.metric(
            label="‚ö° Ortalama Yanƒ±t",
            value=metrikliler['ortalama_yanit_suresi'],
            delta="Ultra hƒ±zlƒ±"
        )
    
    with col4:
        st.metric(
            label="üïê Uptime",
            value=metrikliler['uptime'],
            delta="Kesintisiz"
        )
    
    # Kategori daƒüƒ±lƒ±mƒ±
    if metrikliler['kategori_dagilimi']:
        st.markdown("---")
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Pie chart
            fig = px.pie(
                values=list(metrikliler['kategori_dagilimi'].values()),
                names=[k.replace('_', ' ').title() for k in metrikliler['kategori_dagilimi'].keys()],
                title="üìÇ CPR Kategori Daƒüƒ±lƒ±mƒ±",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("### üìã Kategori Detaylarƒ±")
            for kategori, sayi in metrikliler['kategori_dagilimi'].items():
                st.markdown(f"**{kategori.replace('_', ' ').title()}:** {sayi} dok√ºman")
    
    # Performans grafiƒüi
    performans_data = st.session_state.pro_sistem.retriever.get_performans_grafigi()
    if performans_data:
        st.markdown("---")
        st.markdown("### üìà Son Sorgular Performans Trendi")
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=list(range(len(performans_data['skorlar']))),
            y=performans_data['skorlar'],
            mode='lines+markers+text',
            text=performans_data['sorgular'],
            textposition="top center",
            line=dict(color='#667eea', width=3),
            marker=dict(size=8, color='#764ba2'),
            name='Benzerlik Skoru'
        ))
        
        fig.update_layout(
            title="Son Sorgularƒ±n Benzerlik Skorlarƒ±",
            xaxis_title="Sorgu Sƒ±rasƒ±",
            yaxis_title="Benzerlik Skoru",
            yaxis=dict(range=[0, 1]),
            showlegend=False,
            template="plotly_white"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("---")
    
    # PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û SORU B√ñL√úM√ú
    st.markdown("## üí¨ Profesyonel Sorgulama Sistemi")
    
    soru = st.text_input(
        "CPR konusunda detaylƒ± sorunuzu yazƒ±n:",
        value=st.session_state.get('pro_soru_input', ''),
        placeholder="√ñrn: Yeti≈ükinlerde kardiyak arrest durumunda epinefrin dozu ve uygulama ≈üekli nedir?",
        key="pro_ana_input",
        help="üí° ƒ∞pucu: Daha spesifik sorular daha iyi sonu√ßlar verir"
    )
    
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        sorgula_btn = st.button("üîç Profesyonel Analiz", type="primary", width='stretch')
    
    with col2:
        if st.button("üîÑ Temizle", width='stretch'):
            st.session_state.pro_soru_input = ""
            st.rerun()
    
    with col3:
        if st.button("üé≤ Rastgele Pro", width='stretch'):
            st.session_state.pro_soru_input = random.choice(gelismis_ornekler)
            st.rerun()
    
    # PROFESYONEL SONU√áLAR
    if sorgula_btn and soru.strip():
        with st.spinner("ü§ñ Profesyonel AI sistemi kapsamlƒ± analiz yapƒ±yor..."):
            time.sleep(0.5)  # Professional feel
            sonuc = st.session_state.pro_sistem.profesyonel_sorgulama(soru)
        
        st.markdown("---")
        
        # Sonu√ß durumu kartƒ±
        if sonuc["basarili"]:
            if sonuc["acil_durum"]:
                st.markdown('<div class="emergency-card">üö® <strong>KRƒ∞Tƒ∞K ACƒ∞L PROTOKOL BULUNDU!</strong> Ya≈üamsal √∂neme sahip bilgi.</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="success-card">‚úÖ <strong>Profesyonel protokol ba≈üarƒ±yla bulundu!</strong> Y√ºksek kaliteli sonu√ß.</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="warning-card">‚ö†Ô∏è <strong>Akƒ±llƒ± √∂neriler sunuluyor.</strong> Daha spesifik arama √∂nerileri mevcut.</div>', unsafe_allow_html=True)
        
        # Ana yanƒ±t
        st.markdown(sonuc['yanit'])
        
        # PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û ANALƒ∞Z SONU√áLARI
        st.markdown("---")
        st.markdown("## üìä Detaylƒ± Analiz Raporu")
        
        # ƒ∞ki s√ºtunlu analiz
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üîç Arama Detaylarƒ±")
            st.markdown(f"""
            <div class="metric-card">
                <strong>üéØ En ƒ∞yi Skor:</strong> {sonuc['en_iyi_skor']:.3f}<br>
                <strong>üîç Bulunan Dok√ºman:</strong> {sonuc['bulunan_dokuman_sayisi']}<br>
                <strong>‚≠ê Kaliteli Sonu√ß:</strong> {sonuc['kaliteli_sonuc_sayisi']}<br>
                <strong>üéöÔ∏è Kullanƒ±lan E≈üik:</strong> {sonuc['kullanilan_esik']:.3f} ({sonuc['esik_tipi']})<br>
                <strong>‚ö° Yanƒ±t S√ºresi:</strong> {sonuc['yanit_suresi']:.2f}s
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("### üìà Sistem Performansƒ±")
            st.markdown(f"""
            <div class="metric-card">
                <strong>üèÜ Performans:</strong> {sonuc['sistem_performansi']}<br>
                <strong>üìä Genel Ba≈üarƒ±:</strong> {sonuc['basari_orani']}<br>
                <strong>ü´Ä CPR Odaklƒ±:</strong> {'‚úÖ Evet' if sonuc['cpr_odakli'] else '‚ùå Hayƒ±r'}<br>
                <strong>üö® Acil Durum:</strong> {'üî¥ EVET' if sonuc['acil_durum'] else 'üü¢ Normal'}<br>
                <strong>üéØ Sorgu Tipi:</strong> {sonuc['esik_tipi'].title()}
            </div>
            """, unsafe_allow_html=True)
        
        # Detaylƒ± e≈üle≈üme tablosu
        if sonuc["sonuc_detaylari"]:
            st.markdown("---")
            st.markdown("### üéØ En ƒ∞yi E≈üle≈ümeler - Detaylƒ± Analiz")
            
            tablo_data = []
            for final_skor, ham_skor, kategori, guvenilirlik in sonuc["sonuc_detaylari"]:
                # Kalite deƒüerlendirmesi
                if final_skor > 0.6:
                    kalite = "üèÜ M√ºkemmel"
                    renk = "üü¢"
                elif final_skor > 0.4:
                    kalite = "üöÄ √áok ƒ∞yi"
                    renk = "üîµ"
                elif final_skor > 0.25:
                    kalite = "üìà ƒ∞yi"
                    renk = "üü°"
                else:
                    kalite = "üìä Orta"
                    renk = "üü†"
                
                tablo_data.append({
                    "Durum": renk,
                    "üèÜ Final Skor": f"{final_skor:.3f}",
                    "üìä Ham Skor": f"{ham_skor:.3f}",
                    "üìÇ Kategori": kategori.replace('_', ' ').title(),
                    "‚≠ê G√ºvenilirlik": f"%{guvenilirlik*100:.0f}",
                    "üéØ Kalite": kalite
                })
            
            st.dataframe(
                tablo_data, 
                use_container_width=True, 
                hide_index=True,
                column_config={
                    "Durum": st.column_config.TextColumn(width="small"),
                    "üèÜ Final Skor": st.column_config.NumberColumn(format="%.3f"),
                    "üìä Ham Skor": st.column_config.NumberColumn(format="%.3f")
                }
            )
    
    elif sorgula_btn and not soru.strip():
        st.markdown('<div class="warning-card">‚ùó <strong>L√ºtfen detaylƒ± bir CPR sorusu yazƒ±n.</strong> Daha spesifik sorular daha iyi sonu√ßlar verir.</div>', unsafe_allow_html=True)

# FOOTER - PROFESYONELLE≈ûTƒ∞Rƒ∞LMƒ∞≈û
st.markdown("---")
st.markdown("## üéì CPR Profesyonel Eƒüitim Merkezi")

# √ñzellik showcase
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("""
    <div class="metric-card">
        <h4>üß† Geli≈ümi≈ü AI Teknolojisi</h4>
        <ul>
            <li><strong>480MB b√ºy√ºk model</strong></li>
            <li><strong>√áok dilli destek</strong></li>
            <li><strong>S√ºper kelime geni≈ületme</strong></li>
            <li><strong>Multi-fakt√∂r skorlama</strong></li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown("""
    <div class="metric-card">
        <h4>üìö Kapsamlƒ± Tƒ±bbi ƒ∞√ßerik</h4>
        <ul>
            <li><strong>AHA 2020 Guidelines</strong></li>
            <li><strong>ERC 2021 Standartlarƒ±</strong></li>
            <li><strong>Pediatrik protokoller</strong></li>
            <li><strong>ƒ∞leri ya≈üam desteƒüi</strong></li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown("""
    <div class="metric-card">
        <h4>‚ö° Profesyonel Performans</h4>
        <ul>
            <li><strong>Intelligent e≈üik sistemi</strong></li>
            <li><strong>Ger√ßek zamanlƒ± analiz</strong></li>
            <li><strong>Performans izleme</strong></li>
            <li><strong>Modern UI/UX</strong></li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

# Final professional card
st.markdown("""
<div style="text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 3rem; border-radius: 20px; color: white; margin: 2rem 0; box-shadow: 0 10px 40px rgba(102, 126, 234, 0.3);">
    <h2>ü´Ä CPR Professional System v2.0</h2>
    <p style="font-size: 1.2em; margin: 1rem 0;"><strong>Hayat kurtaran bilgi, profesyonel teknoloji ile bulu≈üuyor</strong></p>
    <div style="display: flex; justify-content: center; gap: 2rem; margin-top: 1.5rem; flex-wrap: wrap;">
        <div>üéØ <strong>Akƒ±llƒ± Arama</strong></div>
        <div>üìä <strong>Performans ƒ∞zleme</strong></div>
        <div>‚ö° <strong>Ultra Hƒ±zlƒ±</strong></div>
        <div>üåê <strong>√áok Dilli</strong></div>
        <div>üß† <strong>480MB Model</strong></div>
    </div>
</div>
""", unsafe_allow_html=True)

st.markdown("""
<div style="text-align: center; padding: 1rem; background: rgba(102, 126, 234, 0.1); border-radius: 10px; margin: 1rem 0;">
    <p><strong>‚ö†Ô∏è UYARI:</strong> Bu sistem eƒüitim ama√ßlƒ±dƒ±r. Ger√ßek acil durumlarda <strong>112</strong>'yi arayƒ±n ve profesyonel tƒ±bbi yardƒ±m alƒ±n.</p>
    <p>T√ºm protokoller <strong>AHA (American Heart Association) 2020 Guidelines</strong> ve <strong>ERC 2021</strong> temelinde hazƒ±rlanmƒ±≈ütƒ±r.</p>
</div>
""", unsafe_allow_html=True)